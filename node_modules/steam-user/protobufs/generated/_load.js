/* eslint-disable */
// Auto-generated by generate-protos script on Tue Sep 28 2021 03:32:36 GMT-0400 (Eastern Daylight Time)

const Schema = module.exports;

mergeObjects(Schema, load('./clientmetrics.json'));
mergeObjects(Schema, load('./common.json'));
mergeObjects(Schema, load('./content_manifest.json'));
mergeObjects(Schema, load('./encrypted_app_ticket.json'));
mergeObjects(Schema, load('./enums.json'));
mergeObjects(Schema, load('./enums_clientserver.json'));
mergeObjects(Schema, load('./friends_mobile.json'));
mergeObjects(Schema, load('./htmlmessages.json'));
mergeObjects(Schema, load('./service_accountlinking.json'));
mergeObjects(Schema, load('./service_accountprivacy.json'));
mergeObjects(Schema, load('./service_auction.json'));
mergeObjects(Schema, load('./service_broadcast.json'));
mergeObjects(Schema, load('./service_chat.json'));
mergeObjects(Schema, load('./service_chatroom.json'));
mergeObjects(Schema, load('./service_chatusability.json'));
mergeObjects(Schema, load('./service_clan.json'));
mergeObjects(Schema, load('./service_clanchatrooms.json'));
mergeObjects(Schema, load('./service_clanfaqs.json'));
mergeObjects(Schema, load('./service_clientmetrics.json'));
mergeObjects(Schema, load('./service_cloudconfigstore.json'));
mergeObjects(Schema, load('./service_community.json'));
mergeObjects(Schema, load('./service_econ.json'));
mergeObjects(Schema, load('./service_embedded.json'));
mergeObjects(Schema, load('./service_experimentservice.json'));
mergeObjects(Schema, load('./service_fovasvideo.json'));
mergeObjects(Schema, load('./service_friendmessages.json'));
mergeObjects(Schema, load('./service_friendslist.json'));
mergeObjects(Schema, load('./service_loyaltyrewards.json'));
mergeObjects(Schema, load('./service_news.json'));
mergeObjects(Schema, load('./service_parental.json'));
mergeObjects(Schema, load('./service_player.json'));
mergeObjects(Schema, load('./service_publishedfile.json'));
mergeObjects(Schema, load('./service_quest.json'));
mergeObjects(Schema, load('./service_saleitemrewards.json'));
mergeObjects(Schema, load('./service_steamtv.json'));
mergeObjects(Schema, load('./service_store.json'));
mergeObjects(Schema, load('./service_storebrowse.json'));
mergeObjects(Schema, load('./service_storequery.json'));
mergeObjects(Schema, load('./service_summersale2020.json'));
mergeObjects(Schema, load('./service_useraccount.json'));
mergeObjects(Schema, load('./service_usergameactivity.json'));
mergeObjects(Schema, load('./service_usernews.json'));
mergeObjects(Schema, load('./service_userreviews.json'));
mergeObjects(Schema, load('./service_video.json'));
mergeObjects(Schema, load('./service_voicechat.json'));
mergeObjects(Schema, load('./service_webrtc.json'));
mergeObjects(Schema, load('./steamdatagram_messages_auth.json'));
mergeObjects(Schema, load('./steamdatagram_messages_sdr.json'));
mergeObjects(Schema, load('./steammessages_accounthardware.steamclient.json'));
mergeObjects(Schema, load('./steammessages_appoverview.json'));
mergeObjects(Schema, load('./steammessages_auth.steamclient.json'));
mergeObjects(Schema, load('./steammessages_base.json'));
mergeObjects(Schema, load('./steammessages_broadcast.steamclient.json'));
mergeObjects(Schema, load('./steammessages_chat.steamclient.json'));
mergeObjects(Schema, load('./steammessages_clientlanp2p.json'));
mergeObjects(Schema, load('./steammessages_clientmetrics.steamclient.json'));
mergeObjects(Schema, load('./steammessages_clientnotificationtypes.json'));
mergeObjects(Schema, load('./steammessages_clientserver.json'));
mergeObjects(Schema, load('./steammessages_clientserver_2.json'));
mergeObjects(Schema, load('./steammessages_clientserver_appinfo.json'));
mergeObjects(Schema, load('./steammessages_clientserver_friends.json'));
mergeObjects(Schema, load('./steammessages_clientserver_gameservers.json'));
mergeObjects(Schema, load('./steammessages_clientserver_lbs.json'));
mergeObjects(Schema, load('./steammessages_clientserver_login.json'));
mergeObjects(Schema, load('./steammessages_clientserver_mms.json'));
mergeObjects(Schema, load('./steammessages_clientserver_ucm.json'));
mergeObjects(Schema, load('./steammessages_clientserver_uds.json'));
mergeObjects(Schema, load('./steammessages_clientserver_ufs.json'));
mergeObjects(Schema, load('./steammessages_clientserver_userstats.json'));
mergeObjects(Schema, load('./steammessages_client_objects.json'));
mergeObjects(Schema, load('./steammessages_cloud.steamclient.json'));
mergeObjects(Schema, load('./steammessages_contentsystem.steamclient.json'));
mergeObjects(Schema, load('./steammessages_credentials.steamclient.json'));
mergeObjects(Schema, load('./steammessages_datapublisher.steamclient.json'));
mergeObjects(Schema, load('./steammessages_depotbuilder.steamclient.json'));
mergeObjects(Schema, load('./steammessages_deviceauth.steamclient.json'));
mergeObjects(Schema, load('./steammessages_econ.steamclient.json'));
mergeObjects(Schema, load('./steammessages_friendmessages.steamclient.json'));
mergeObjects(Schema, load('./steammessages_gamenetworking.steamclient.json'));
mergeObjects(Schema, load('./steammessages_gamenetworkingui.json'));
mergeObjects(Schema, load('./steammessages_gamenotifications.steamclient.json'));
mergeObjects(Schema, load('./steammessages_gameservers.steamclient.json'));
mergeObjects(Schema, load('./steammessages_hiddevices.json'));
mergeObjects(Schema, load('./steammessages_inventory.steamclient.json'));
mergeObjects(Schema, load('./steammessages_linkfilter.steamclient.json'));
mergeObjects(Schema, load('./steammessages_lobbymatchmaking.steamclient.json'));
mergeObjects(Schema, load('./steammessages_market.steamclient.json'));
mergeObjects(Schema, load('./steammessages_offline.steamclient.json'));
mergeObjects(Schema, load('./steammessages_parental.steamclient.json'));
mergeObjects(Schema, load('./steammessages_parties.steamclient.json'));
mergeObjects(Schema, load('./steammessages_partnerapps.steamclient.json'));
mergeObjects(Schema, load('./steammessages_player.steamclient.json'));
mergeObjects(Schema, load('./steammessages_publishedfile.steamclient.json'));
mergeObjects(Schema, load('./steammessages_qms.steamclient.json'));
mergeObjects(Schema, load('./steammessages_remoteclient.json'));
mergeObjects(Schema, load('./steammessages_remoteclient_discovery.json'));
mergeObjects(Schema, load('./steammessages_remoteclient_service.steamclient.json'));
mergeObjects(Schema, load('./steammessages_remoteclient_service_messages.json'));
mergeObjects(Schema, load('./steammessages_remoteplay.json'));
mergeObjects(Schema, load('./steammessages_secrets.steamclient.json'));
mergeObjects(Schema, load('./steammessages_shader.steamclient.json'));
mergeObjects(Schema, load('./steammessages_sitelicenseclient.json'));
mergeObjects(Schema, load('./steammessages_siteserverui.json'));
mergeObjects(Schema, load('./steammessages_site_license.steamclient.json'));
mergeObjects(Schema, load('./steammessages_star.steamclient.json'));
mergeObjects(Schema, load('./steammessages_store.steamclient.json'));
mergeObjects(Schema, load('./steammessages_timedtrial.steamclient.json'));
mergeObjects(Schema, load('./steammessages_twofactor.steamclient.json'));
mergeObjects(Schema, load('./steammessages_unified_base.steamclient.json'));
mergeObjects(Schema, load('./steammessages_unified_test.steamclient.json'));
mergeObjects(Schema, load('./steammessages_useraccount.steamclient.json'));
mergeObjects(Schema, load('./steammessages_vac.steamclient.json'));
mergeObjects(Schema, load('./steammessages_video.steamclient.json'));
mergeObjects(Schema, load('./steammessages_virtualcontroller.json'));
mergeObjects(Schema, load('./steammessages_workshop.steamclient.json'));
mergeObjects(Schema, load('./steamnetworkingsockets_messages.json'));
mergeObjects(Schema, load('./steamnetworkingsockets_messages_certs.json'));
mergeObjects(Schema, load('./steamnetworkingsockets_messages_udp.json'));

function mergeObjects(destinationObject, sourceObject) {
	for (let i in sourceObject) {
		if (sourceObject.hasOwnProperty(i)) {
			destinationObject[i] = sourceObject[i];
		}
	}
}
function load(filename) {
	return require('protobufjs').Root.fromJSON(require(filename));
}
